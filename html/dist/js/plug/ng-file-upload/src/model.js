ngFileUpload.service("Upload",["$parse","$timeout","$compile","$q","UploadExif",function($parse,$timeout,$compile,$q,UploadExif){function applyExifRotations(files,attr,scope){var promises=[upload.emptyPromise()];return angular.forEach(files,function(f,i){0===f.type.indexOf("image/jpeg")&&upload.attrGetter("ngfFixOrientation",attr,scope,{$file:f})&&promises.push(upload.happyPromise(upload.applyExifRotation(f),f).then(function(fixedFile){files.splice(i,1,fixedFile)}))}),$q.all(promises)}function resizeFile(files,attr,scope,ngModel){var resizeVal=upload.attrGetter("ngfResize",attr,scope);if(!resizeVal||!upload.isResizeSupported()||!files.length)return upload.emptyPromise();if(resizeVal instanceof Function){var defer=$q.defer();return resizeVal(files).then(function(p){resizeWithParams(p,files,attr,scope,ngModel).then(function(r){defer.resolve(r)},function(e){defer.reject(e)})},function(e){defer.reject(e)})}return resizeWithParams(resizeVal,files,attr,scope,ngModel)}function resizeWithParams(params,files,attr,scope,ngModel){for(var promises=[upload.emptyPromise()],i=0;i<files.length;i++)!function(f,i){if(0===f.type.indexOf("image")){if(params.pattern&&!upload.validatePattern(f,params.pattern))return;params.resizeIf=function(width,height){return upload.attrGetter("ngfResizeIf",attr,scope,{$width:width,$height:height,$file:f})};var promise=upload.resize(f,params);promises.push(promise),promise.then(function(resizedFile){files.splice(i,1,resizedFile)},function(e){f.$error="resize",(f.$errorMessages=f.$errorMessages||{}).resize=!0,f.$errorParam=(e?(e.message?e.message:e)+": ":"")+(f&&f.name),ngModel.$ngfValidations.push({name:"resize",valid:!1}),upload.applyModelValidation(ngModel,files)})}}(files[i],i);return $q.all(promises)}var upload=UploadExif;return upload.getAttrWithDefaults=function(attr,name){if(null!=attr[name])return attr[name];var def=upload.defaults[name];return null==def?def:angular.isString(def)?def:JSON.stringify(def)},upload.attrGetter=function(name,attr,scope,params){var attrVal=this.getAttrWithDefaults(attr,name);if(!scope)return attrVal;try{return params?$parse(attrVal)(scope,params):$parse(attrVal)(scope)}catch(e){if(name.search(/min|max|pattern/i))return attrVal;throw e}},upload.shouldUpdateOn=function(type,attr,scope){var modelOptions=upload.attrGetter("ngfModelOptions",attr,scope);return!modelOptions||!modelOptions.updateOn||modelOptions.updateOn.split(" ").indexOf(type)>-1},upload.emptyPromise=function(){var d=$q.defer(),args=arguments;return $timeout(function(){d.resolve.apply(d,args)}),d.promise},upload.rejectPromise=function(){var d=$q.defer(),args=arguments;return $timeout(function(){d.reject.apply(d,args)}),d.promise},upload.happyPromise=function(promise,data){var d=$q.defer();return promise.then(function(result){d.resolve(result)},function(error){$timeout(function(){throw error}),d.resolve(data)}),d.promise},upload.updateModel=function(ngModel,attr,scope,fileChange,files,evt,noDelay){function update(files,invalidFiles,newFiles,dupFiles,isSingleModel){attr.$$ngfPrevValidFiles=files,attr.$$ngfPrevInvalidFiles=invalidFiles;var file=files&&files.length?files[0]:null,invalidFile=invalidFiles&&invalidFiles.length?invalidFiles[0]:null;ngModel&&(upload.applyModelValidation(ngModel,files),ngModel.$setViewValue(isSingleModel?file:files)),fileChange&&$parse(fileChange)(scope,{$files:files,$file:file,$newFiles:newFiles,$duplicateFiles:dupFiles,$invalidFiles:invalidFiles,$invalidFile:invalidFile,$event:evt});var invalidModel=upload.attrGetter("ngfModelInvalid",attr);invalidModel&&$timeout(function(){$parse(invalidModel).assign(scope,isSingleModel?invalidFile:invalidFiles)}),$timeout(function(){})}function resizeAndUpdate(){function updateModel(){$timeout(function(){update(keep?prevValidFiles.concat(valids):valids,keep?prevInvalidFiles.concat(invalids):invalids,files,dupFiles,isSingleModel)},options&&options.debounce?options.debounce.change||options.debounce:0)}var resizingFiles=validateAfterResize?allNewFiles:valids;resizeFile(resizingFiles,attr,scope,ngModel).then(function(){validateAfterResize?upload.validate(allNewFiles,keep?prevValidFiles.length:0,ngModel,attr,scope).then(function(validationResult){valids=validationResult.validsFiles,invalids=validationResult.invalidsFiles,updateModel()}):updateModel()},function(){for(var i=0;i<resizingFiles.length;i++){var f=resizingFiles[i];if("resize"===f.$error){var index=valids.indexOf(f);index>-1&&(valids.splice(index,1),invalids.push(f)),updateModel()}}})}var allNewFiles,prevValidFiles,prevInvalidFiles,dupFiles=[],invalids=[],valids=[];prevValidFiles=attr.$$ngfPrevValidFiles||[],prevInvalidFiles=attr.$$ngfPrevInvalidFiles||[],ngModel&&ngModel.$modelValue&&(prevValidFiles=function(v){return angular.isArray(v)?v:[v]}(ngModel.$modelValue));var keep=upload.attrGetter("ngfKeep",attr,scope);allNewFiles=(files||[]).slice(0),"distinct"!==keep&&!0!==upload.attrGetter("ngfKeepDistinct",attr,scope)||function(){function equals(f1,f2){return f1.name===f2.name&&(f1.$ngfOrigSize||f1.size)===(f2.$ngfOrigSize||f2.size)&&f1.type===f2.type}if(files){allNewFiles=[],dupFiles=[];for(var i=0;i<files.length;i++)!function(f){var j;for(j=0;j<prevValidFiles.length;j++)if(equals(f,prevValidFiles[j]))return!0;for(j=0;j<prevInvalidFiles.length;j++)if(equals(f,prevInvalidFiles[j]))return!0;return!1}(files[i])?allNewFiles.push(files[i]):dupFiles.push(files[i])}}();var isSingleModel=!keep&&!upload.attrGetter("ngfMultiple",attr,scope)&&!upload.attrGetter("multiple",attr);if(!keep||allNewFiles.length){upload.attrGetter("ngfBeforeModelChange",attr,scope,{$files:files,$file:files&&files.length?files[0]:null,$newFiles:allNewFiles,$duplicateFiles:dupFiles,$event:evt});var validateAfterResize=upload.attrGetter("ngfValidateAfterResize",attr,scope),options=upload.attrGetter("ngfModelOptions",attr,scope);upload.validate(allNewFiles,keep?prevValidFiles.length:0,ngModel,attr,scope).then(function(validationResult){noDelay?update(allNewFiles,[],files,dupFiles,isSingleModel):(options&&options.allowInvalid||validateAfterResize?valids=allNewFiles:(valids=validationResult.validFiles,invalids=validationResult.invalidFiles),upload.attrGetter("ngfFixOrientation",attr,scope)&&upload.isExifSupported()?applyExifRotations(valids,attr,scope).then(function(){resizeAndUpdate()}):resizeAndUpdate())})}},upload}]);